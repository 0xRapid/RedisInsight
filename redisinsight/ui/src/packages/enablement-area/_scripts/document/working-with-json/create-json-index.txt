// It is possible to index either every hash or every JSON document in the keyspace or configure indexing only for a subset of the same data type documents described by a prefix.

// RedisJSON supports JSONPath, so we can easily access and index nested properties and array elements.
// Note that you cannot index values that contain JSON objects or JSON arrays. To be indexed, a JSONPath expression must return a single scalar value (string or number). If the JSONPath expression returns an object or an array, it will be ignored.

// JSON Strings can only be indexed as TEXT, TAG and GEO (using the right syntax).
// JSON numbers can only be indexed as NUMERIC.
// Boolean and NULL values are ignored.

// Command to create an index on JSON keys that are prefixed with "school:"

FT.CREATE schools           // Index name
 on JSON                   // Indicates the type of data to index
   PREFIX 1 "school:"      // Tells the index which keys it should index
 SCHEMA
   $.name AS name TEXT NOSTEM SORTABLE    // Will be indexed as a TEXT field. Will permit sorting during query. Stemming is disabled - which is ideal for proper names.
   $.description AS description TEXT
   $.school_type AS school_type TAG SEPARATOR ";"    // For tag fields, a separator indicates how the text contained in the field is to be split into individual tags
   $.class AS class TAG // Will be indexed as a tag. Will allow exact-match queries.
   $.address.street AS address TEXT NOSTEM    // '$.address.street' field will be indexed as TEXT and can be referred as 'street' due to the '... AS fieldname ...' construct.
   $.address.city AS city TAG
   $.pupils AS pupils NUMERIC SORTABLE   // Will be indexed as a numeric field. Will permit sorting during query
   $.location AS location GEO     // Will be indexed as GEO. Will allow geographic range queries
   $.status_log.[-1] as status TAG // Will index the last element of the array as "status"
