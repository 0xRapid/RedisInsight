export interface WorkbenchPreselects {
  script: string;
  title: string;
}

export const workbenchPreselects = [
  {
    title: 'Manual',
    script: [
      '// Workbench is the advanced Redis command-line interface that allows to send commands to Redis, read and visualize the replies sent by the server.',
      '// Enter multiple commands at different rows to run them at once.',
      '// Start a new line with an indent (Tab) to specify arguments for any Redis command in multiple line mode.',
      '// Use F1 to see the full list of shortcuts available in Workbench.',
      '// Use Ctrl+Space (Cmd+Space) to see the list of commands and information about commands and their arguments in the suggestion list.',
      '// Use Ctrl+Shift+Space (Cmd+Shift+Space) to see the list of arguments for commands.'
    ].join('\n')
  },
  {
    title: 'List the Indices',
    script: 'FT._LIST',
  },
  {
    title: 'Index info',
    script: 'FT.INFO {index}',
  },
  {
    title: 'Search',
    script: [
      '// Search the index with a textual query',
      '// Replace:',
      '// {index} with name of index',
      '// {"query"} with the text query to search`',
      '',
      'FT.SEARCH {index} {“query”}',
      '    ',
      '    // Optional:',
      '    // NOCONTENT // - Return the document ids and not the content',
      '    // VERBATIM // - Do not try to use stemming for query expansion but search the query terms verbatim',
      '    // NOSTOPWORDS // - Do not filter stopwords from the query',
      '    // WITHSCORES // - Return the relative internal score of each document',
      '    // WITHPAYLOADS // - Retrieve optional document payloads',
      '    // WITHSORTKEYS // - Returns the value of the sorting key',
      '    // FILTER {numeric_field} {min} {max} // - Limit results to those having numeric values ranging between min and max. Replace {numeric_field} with the field, {min} with minimum value and {max} with maximum value',
      '    // GEOFILTER {geo_field} {lon} {lat} {radius} m|km|mi|ft // - Filter the results to a given radius from lon and lat. Replace {geo_field} with the field, {lon} with the longitude, {lat} with the latitude, {radius} with the radius, select a unit – m, km, mi or ft',
      '    // INKEYS {num} {key} // - Limit the result to a given set of keys specified in the list. Replace {num} with the number of keys, {key} with the list of keys',
      '    // INFIELDS {num} {field} // - Filter the results to ones appearing only in specific fields of the document. Replace {num} with the number of keys, {field} with the list of fields',
      '    // RETURN {num} {field} // - Limit which fields from the document are returned. Replace {num} with the number of fields, {field} with the list of fields',
      '    // SUMMARIZE // - Return only the sections of the field which contain the matched text. SUMMARIZE keyword accepts FIELDS, FRAGS, LEN and SEPARATOR',
      '    // FIELDS {num} {field} // - List of fields to summarize. Replace {num} with the number of keys, {field} with the list of fields. Used only with SUMMARIZE keyword',
      '    // FRAGS {num} // - How many fragments should be returned. If not specified, a default of 3 is used. Used only with SUMMARIZE keyword',
      '    // LEN {fragsize} // - Number of context words each fragment should contain. Replace {fragsize} with the number of context words. Used only with SUMMARIZE keyword',
      '    // SEPARATOR {separator} // - String used to divide between individual summary snippets. Replace {separator} with the string. Used only with SUMMARIZE keyword',
      '    // HIGHLIGHT // - Highlight the found term (and its variants) with a user-defined tag. HIGHLIGHT keyword accepts FIELDS and TAGS',
      '    // FIELDS {num} {field} // - Specify fields to highlight. Replace {num} with the number of keys, {field} with the list of fields. Used only with HIGHLIGHT keyword',
      '    // TAGS {open} {close} // - Replace {open} with the string to prepend to each term match, {close} with the string to append to each term match. Used only with HIGHLIGHT keyword',
      '    // SLOP {slop} // - Allow a maximum of N intervening number of unmatched offsets between phrase terms. Replace {slope} with the number',
      '    // INORDER // - Make sure the query terms appear in the same order in the document as in the query, regardless of the offsets between them',
      '    // LANGUAGE {language} // - Use a stemmer for the supplied language during search for query expansion. Replace {language} with the language',
      '    // EXPANDER {expander} // - Use a custom query expander instead of the stemmer. Replace {expander} with the custom expander',
      '    // SCORER {scorer} // - Use a custom scoring function defined by the user. Replace {scorer} with the custom expander',
      '    // EXPLAINSCORE // - Return a textual description of how the scores were calculated',
      '    // PAYLOAD {payload} // - Add an arbitrary, binary safe payload that will be exposed to custom scoring functions. Replace {payload} with the payload',
      '    // SORTBY {field} ASC|DESC // - Results are ordered by the value of this field. Replace {field} with the field, ASC|DESC – with ASC or DESC',
      '    // LIMIT offset num // - Limit the results to the offset and number of results given. Replace offset with the offset (zero-indexed), num with the number of items to return starting from the first result',
    ].join('\n'),
  },
  {
    title: 'Aggregate',
    script: [
      '// Run a search query on an index and perform aggregate transformations on the results',
      '// Replace:',
      '// {index} with name of index',
      '// {“query”} with the text query to search',
      '',
      'FT.AGGREGATE {index} {“query”}',
      '    ',
      '    // VERBATIM // - Do not try to use stemming for query expansion but search the query terms verbatim',
      '    // LOAD {nargs} {property} // - Load document fields from the document objects. This should be avoided as a general rule of thumb. Replace {nargs} with the number of fields, {property} with the list of fields',
      '    // GROUPBY {nargs} {property} // Group the results in the pipeline based on one or more properties. Each group should have at least one reducer (REDUCE function). Replace {nargs} with the number of fields, {property} with the list of fields',
      '    // REDUCE {func} {nargs} {arg} // Reduce the matching results in each group into a single record, using a reduction function. Replace {func} with {nargs} with the number of arguments, {arg} with the list of arguments',
      '    // AS {name:string} // Optional argument to specify a name for reducer. Used only with REDUCE keyword',
      '    // SORTBY {nargs} {property} ASC|DESC // Sort the pipeline up until the point of SORTBY, using a list of properties. Replace {nargs} with the number of fields, {property} with the list of fields, ASC|DESC – with ASC or DESC',
      '    // MAX {num} // used to optimized sorting, by sorting only for the n-largest elements. Used only with SORTBY keyword. Replace {num} with the number of elements',
      '    // APPLY {expr} // Apply a 1-to-1 transformation on one or more properties. Replace {expr} with expression',
      '    // AS {alias} // Optional argument to specify a name for expressions. Used only with APPLY keyword',
      '    // LIMIT {offset} {num} // Limit the results to the offset and number of results given. Replace {offset} with the offset (zero-indexed), {num} with the number of items to return starting from the first result',
      '    // FILTER {expr} // Filter the results using predicate expressions relating to values in each result. Replace {expr} with the expression',
    ].join('\n'),
  },
]
